/*
 * Product.c
 *
 *  Created on: 14 may 2022
 *      Author: gonza
 */

#include "Product.h"
#include "General.h"

static int idAI = 2000;
static int Product_getUniqueId() {
	return idAI++;
}

/** \brief print the content of one element of Product
 *
 * \param list Product
 * \return int
 *
 */

int Product_initializeProducts(Product *productList, int size) {
	int r = -1;
	int i;

	if (productList != NULL && size > 0) {
		for (i = 0; i < size; i++) {
			productList[i].isEmpty = FREE;
		}
	}
	return r;
}

void Product_printOne(Product p) {
	printf("ID %d\nNombre: %s\nPrecio: %.2f\nCategoria: %d\nStock: %d\n",
			p.idProduct, p.productName, p.price, p.category, p.stock);

}

/** \brief print the content of Products array
 *
 * \param list Product*
 * \param length int
 * \return int
 *
 */

int Product_PrintProducts(Product ProductsList[], int size, int status) {
	int r = -1;

	if (ProductsList != NULL) {
		if (size > 0) {
			if (Product_Sort(ProductsList, size) == 0) {
				printf("%*s | %*s | %*s | %*s | %*s\n", -4, "ID", -MAX,
						"PRODUCTO", -MAX, "CATEGORIA", -MAX, "PRECIO", -MAX,
						"STOCK");
				printf("%*c | %*c | %*c | %*c | %*c\n", -4, '-', -MAX, '-',
						-MAX, '-', -MAX, '-', -MAX, '-');
				for (int i = 0; i < size; i++) {
					if (ProductsList[i].isEmpty == status) {
						printf("%-4d | %-10s | %-10d | %-10.2f | %-10d\n",
								ProductsList[i].idProduct,
								ProductsList[i].productName,
								ProductsList[i].category, ProductsList[i].price,
								ProductsList[i].stock);
						r = 0;
					}
				}
			}
		}
	}

	return r;
}

int Product_Sort(Product productList[], int size) {
	int r = -1;
	int i;
	int j;
	Product aux;

	if (productList != NULL && size > 0) {

		for (i = 0; i < size - 1; i++) {
			for (j = i + 1; j < size; j++) {
				if (productList[i].isEmpty == ACTIVE
						&& productList[j].isEmpty == ACTIVE) {
					if (productList[i].category < productList[j].category) {
						aux = productList[i];
						productList[i] = productList[j];
						productList[j] = aux;
					}
				}
			}
		}
		r = 0;

	}
	return r;
}

/** \brief To indicate that all position in the array are empty,
 * this function put the flag (isEmpty) in TRUE in all
 * position of the array
 * \param list Product* Pointer to array of Product
 * \param len int Array length
 * \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
 *
 */

/** \brief Search free space in array list, load the no-generic data of the Product, gives him an ID and
 *  add Product's data.
 * \param list Product* Pointer to array of Product
 * \param len int Array length
 * \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
 *
 */

/*int Product_Membership(Product productList[], int size) {
 int r = -1;
 Product auxProduct;

 if (productList != NULL && size > 0) {
 int index = Product_SearchSpace(productList, size, FREE);
 if (index != -1) {
 auxProduct = Product_LoadProduct();
 auxProduct.idProducto = Product_getUniqueId();
 auxProduct.isEmpty = OCCUPIED;
 productList[index] = auxProduct;

 r = 0;
 }
 }

 return r;
 }*/

/** \brief modifies one Product of the array
 * \param list Product*
 * \param len int
 * \return int Return (-1) if Error [Invalid length or NULL pointer or without
 free space] - (0) if Ok*/

/*int Product_Edit(Product productList[], int size) {
 int r = -1;
 int indexToModify;
 int ID;
 Product aux;

 if (productList != NULL) {
 if (size > 0) {
 Product_printProducts(productList, size);
 if (utn_getNumero("Ingrese el ID a modificar:", "Hubo un error", 0,
 3, &ID) == 0) {
 indexToModify = Product_SearchIndexPerId(productList, size, ID);
 if (indexToModify == -1) {
 printMessage("No se encontro el ID en la lista.\n", 1);
 return r;
 } else {
 printMessage("El pasajero a modificar es el siguiente:\n",
 1);
 Product_printOne(productList[indexToModify]);
 aux = productList[indexToModify];
 aux = Product_ModificarUno(aux);
 if (confirmation(
 "¿Esta seguro que quiere modificar los datos?(1-Si/Otro numero-No)\n",
 "Ha habido un error en relacion al numero ingresado. Intentelo nuevamente.\n")
 == 1) {
 productList[indexToModify] = aux;
 r = 0;
 }
 }
 }
 } else {
 r = -3;
 }
 } else {
 r = -2;
 }
 return r;
 }*/

/** \brief Remove a Product by Id (put isEmpty Flag in 1)
 *
 * \param list Product*
 * \param len int
 * \param id int
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a Product] - (0) if Ok
 *
 */
int Product_RemoveProduct(Product productList[], int size) {
	int r = -1;
	int indexToRemove;
	int ID = 0;

	if (productList != NULL) {
		if (size > 0) {
			if (Product_PrintProducts(productList, size, ACTIVE) == 0) {
				if (utn_getNumero(
						"Ingrese el ID del producto que desea dar de baja:\n",
						"Hubo un error\n", 0, 3, &ID) == 0) {
					indexToRemove = Product_SearchIndexPerId(productList, size,
							ID,
							ACTIVE);
					if (indexToRemove == -1) {
						printf("No se encontro el ID en la lista.\n");
						return r;
					} else {
						printf(
								"El producto que desea dar de baja es el siguiente:\n");
						Product_printOne(productList[indexToRemove]);

						if (confirmation(
								"¿Esta seguro que quiere darlo de baja?(1-Si/Otro numero-No)\n",
								"Ha habido un error en relacion al numero ingresado. Intentelo nuevamente.\n")
								== 1) {
							productList[indexToRemove].isEmpty = LOW;
							r = 0;
						} else {
							r = -2;
						}
					}
				}
			}
		}
	}
	return r;
}

int Product_BuyProduct(Product productList[], int size) {
	int r = -1;
	int indexBuy;
	int stockToBuy;
	float totalPrice;
	int ID = 0;

	if (productList != NULL) {
		if (size > 0) {
			Product_PrintProducts(productList, size, ACTIVE);
			if (utn_getNumero("Ingrese el ID del producto a comprar:\n",
					"Hubo un error\n", 0, 3, &ID) == 0) {
				indexBuy = Product_SearchIndexPerId(productList, size, ID,
				ACTIVE);
				if (indexBuy == -1) {
					printf("No se encontro el ID en la lista.\n");
					return r;
				} else {
					printf(
							"El producto que desea comprar es el siguiente:\n");
					Product_printOne(productList[indexBuy]);
					utn_getNumeroWithMax(
							"Ingrese la cantidad de elementos que desea comprar.\n",
							"Ha habido un error, vuelva a intentarlo.\n", 0,
							productList[indexBuy].stock, 3, &stockToBuy);
					totalPrice = stockToBuy * productList[indexBuy].price;
					printf("Precio final: %.2f", totalPrice);
					if (confirmation(
							"¿Esta seguro que quiere comprar?(1-Si/Otro numero-No)\n",
							"Ha habido un error en relacion al numero ingresado. Intentelo nuevamente.\n")
							== 1) {
						productList[indexBuy].stock =
								productList[indexBuy].stock - stockToBuy;
						if (productList[indexBuy].stock == 0) {
							productList[indexBuy].isEmpty = NOSTOCK;
						}

						//Alta de tracking
						r = 0;
					} else {
						r = -2;
					}
				}
			}

		}
	}
	return r;
}

int Product_SellProduct(Product productList[], int size, int userId) {
	int r = -1;
	Product auxProduct;

	if (productList != NULL && size > 0) {
		int indexProduct = Product_SearchSpace(productList, size, FREE);

		if (indexProduct != -1) {
			printf(
					"Categorias:\nModa: 1\nTecnologia: 2\nConstruccion: 3\nElectrodomesticos: 4\n");
			auxProduct = Product_LoadProduct();
			auxProduct.idProduct = Product_getUniqueId();
			auxProduct.isEmpty = ACTIVE;
			auxProduct.idSeller = userId;
			productList[indexProduct] = auxProduct;
			r = 0;
		}
	}
	return r;
}

/** \brief gives options to modify to the Product.
 *
 * \param list Product*
 * \param len int
 * \param id int
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a Product] - (0) if Ok
 *
 */
/*Product Product_ModificarUno(Product s) {
 int opcion;
 do {
 if (utn_getNumero(
 "¿Que campo desea modificar? 1-Nombre\n2-Apellido\n3-Codigo de vuelo\n4-Tipo de pasajero\n5-Precio\n6-Salir\n",
 "Ha habido un error. Intentelo nuevamente.\n", 0, 3, &opcion)
 == 0) {
 switch (opcion) {
 case 1:
 getString(s.name, MAX_SIZE_CHAR, "Nombre:\n",
 "Ha habido un error\n", 3);
 break;
 case 2:
 getString(s.lastname, MAX_SIZE_CHAR, "Apellido:\n",
 "Ha habido un error\n", 3);
 break;
 case 3:
 getString(s.flycode, 10, "Codigo de vuelo:\n",
 "Ha habido un error.\n", 3);

 break;
 case 4:
 utn_getNumero("Tipo de pasajero: 1)Economico / 2)Clase alta\n",
 "Ha habido un error. Intentelo nuevamente.\n", 0, 3,
 &s.typeProduct);
 break;
 case 5:
 utn_getNumeroFlotante("Precio:\n",
 "Ha habido un error. Intentelo nuevamente.\n", 0, 3,
 &s.price);
 break;
 case 6:
 printMessage("Saliendo...", 2);
 break;
 default:
 printMessage("Por favor, ingrese un numero entre 1 y 6.\n", 1);
 }
 }
 } while (opcion != 6);

 return s;
 }*/

/** \brief Search an especific space in the array
 *
 * \param list Product*
 * \param len int
 * \param id status (to search)
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a Product] - (0) if Ok
 *
 */

int Product_SearchSpace(Product productList[], int size, int status) {
	int r = -1;
	int i;

	if (productList != NULL && size > 0) {
		for (i = 0; i <= size; i++) {
			if (productList[i].isEmpty == status) {
				r = i;
				break;
			}
		}
	}
	return r;
}

int Product_SearchIndexPerId(Product productList[], int size, int ID,
		int status) {
	int r = -1;
	int i;

	if (productList != NULL && size > 0) {
		for (i = 0; i < size; i++) {
			if (productList[i].idProduct == ID
					&& productList[i].isEmpty == status) {
				r = i;
				break;
			}
		}
	}

	return r;
}

/** \brief Loads non-generic data to an Product auxiliar and returns it
 *
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a Product] - (0) if Ok
 *
 */

int Product_LoadProduct(Product *auxiliar) {
	int r = -1;


	utn_getString(auxiliar.productName, 25, "Nombre de producto:\n",
			"Error, vuelva a intentar.\n", 3);
	utn_getNumeroFlotante("Precio de producto:\n",
			"Hubo un error. Vuelva a intentar\n", 0, 3, &auxiliar.price);
	utn_getShortInt("Categoria:\n", "Error, vuelva a intentar.\n", 1, 5, 3,
			&auxiliar.category);
	utn_getNumero("Cantidad de stock:\n", "Error, vuelva a intentar.\n", 0, 3,
			&auxiliar.stock);

	return r;

}

/** \brief find a Product by Id en returns the index position in ProductsList.
 *
 * \param list Product*
 * \param len int
 * \param id int
 * \return Return Product index position or (-1) if [Invalid length or
 NULL pointer received or Product not found]
 *
 */

