/*
 * User.c
 *
 *  Created on: 14 may 2022
 *      Author: gonza
 */

#include "User.h"
#include "General.h"

static int idAI = 1000;
static int User_getUniqueId() {
	return idAI++;
}

/** \brief print the content of one element of User
 *
 * \param list User
 * \return int
 *
 */

void User_printOne(User s) {
	printf("ID %d\nEmail: %s\nDireccion: %s\nCodigo postal: %d\n", s.idUsuario,
			s.email, s.address, s.postalCode);
}

/** \brief print the content of Users array
 *
 * \param list User*
 * \param length int
 * \return int
 *
 */

/*int User_printUsers(User UsersList[], int size) {
 int r = -1;
 if (UsersList != NULL) {
 if (size > 0) {
 printf("%*s | %*s | %*s | %*s | %*s | %*s | %*s\n", -4, "ID", -MAX,
 "NOMBRE", -MAX, "APELLIDO", -MAX, "CODIGO", -MAX, "PRECIO",
 -MAX, "TIPO", -MAX, "ESTADO");
 printf("%*c | %*c | %*c | %*c | %*c | %*c | %*c\n", -4, '-', -MAX,
 '-', -MAX, '-', -MAX, '-', -MAX, '-', -MAX, '-', -MAX, '-');
 for (int i = 0; i < size; i++) {
 if (UsersList[i].isEmpty == OCCUPIED) {
 printf(
 "%-4d | %-10s | %-10s | %-10s | %-10.2f | %-10d | %-5d\n",
 UsersList[i].id, UsersList[i].name,
 UsersList[i].lastname,
 UsersList[i].flycode, UsersList[i].price,
 UsersList[i].typeUser,
 UsersList[i].statusFlight);
 }
 }
 r = 0;
 }
 }

 return r;
 }*/

/** \brief To indicate that all position in the array are empty,
 * this function put the flag (isEmpty) in TRUE in all
 * position of the array
 * \param list User* Pointer to array of User
 * \param len int Array length
 * \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
 *
 */

int User_initializeUsers(User *userList, int size) {
	int r = -1;
	int i;

	if (userList != NULL && size > 0) {
		for (i = 0; i < size; i++) {
			userList[i].isEmpty = FREE;
		}
	}
	return r;
}

/** \brief Search free space in array list, load the no-generic data of the User, gives him an ID and
 *  add User's data.
 * \param list User* Pointer to array of User
 * \param len int Array length
 * \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
 *
 */

int User_Membership(User userList[], int size) {
	int r = -1;
	User auxUser;

	if (userList != NULL && size > 0) {
		int index = User_SearchSpace(userList, size, FREE);
		if (index != -1) {
			auxUser = User_LoadUser();
			auxUser.type = 2;
			auxUser.idUsuario = User_getUniqueId();
			auxUser.isEmpty = OCCUPIED;
			userList[index] = auxUser;

			r = 0;
		}
	}

	return r;
}

int User_Login(User userList[], int size, int *userIndex) {
	int r = -1;
	char auxEmail[MAX_EMAIL];
	char auxPassword[MAX_PASSWORD];

	if (userList != NULL && size >= 0) {
		getString(auxEmail, MAX_EMAIL, "Correo electronico:\n",
				"Por favor, asegurese de que ingresa letras", 3);
		getString(auxPassword, MAX_PASSWORD, "Contraseña:\n",
				"Por favor, asegurese de que ingresa letras", 3);
		if (auxEmail != NULL && auxPassword != NULL) {
			for (int i = 0; i < size; i++) {
				if (strcmp(userList[i].email, auxEmail) == 0) {
					if (strcmp(userList[i].password, auxPassword) == 0) {
						if (userList[i].isEmpty != -2) {
							if (userList[i].type == 1) {
								r = 1;
							} else {
								if (userList[i].type == 2) {
									r = 2;
								}
							}
							userList[i].loggedIn = 1;
							*userIndex = i;
							break;
						}
					} else {
						r = -2;
					}
				} else {
					r = -3;
				}
			}
		}
	}

	return r;
}

//HACERLA

/*int User_printUsers(User usersList[], int size, int status) {
 int r = -1;
 if (usersList != NULL) {
 if (size > 0) {
 if (Product_Sort(usersList, size) == 0) {
 printf("%*s | %*s | %*s | %*s | %*s\n", -4, "ID", -MAX,
 "PRODUCTO", -MAX, "CATEGORIA", -MAX, "PRECIO", -MAX,
 "STOCK");
 printf("%*c | %*c | %*c | %*c | %*c\n", -4, '-', -MAX, '-',
 -MAX, '-', -MAX, '-', -MAX, '-');
 for (int i = 0; i < size; i++) {
 if (usersList[i].isEmpty == status) {
 printf("%-4d | %-10s | %-10d | %-10.2f | %-10d\n",
 usersList[i].idProduct,
 usersList[i].productName,
 usersList[i].category, ProductsList[i].price,
 usersList[i].stock);
 }
 }

 }
 }
 r = 0;
 }

 return r;
 }*/

int User_PrintAllUsers(User userList[], int userSize) {
	int r = -1;
	if (userList != NULL && userSize > 0) {
		for (int i = 0; i < userSize; i++) {
			if (userList[i].isEmpty == 1 || userList[i].isEmpty == -1) {
				printf("ID Usuario: %d\nCorreo electronico: %s\n",
						userList[i].idUsuario, userList[i].email);
				if (userList[i].isEmpty == -1) {
					printf("Estado: BAJA\n");
				} else {
					if (userList[i].isEmpty == 1) {
						printf("Estado: ACTIVO\n");
					}
				}
			}
		}
		r = 0;
	}
	return r;
}

int User_LowMembership(User userList[], int userSize, User user) {
	int r = -1;
	int indexToRemove;
	int ID = 0;

	if (userList != NULL) {
		if (userSize > 0) {
			User_PrintAllUsers(userList, userSize);
			if (utn_getNumero(
					"Ingrese el ID del usuario que desea dar de baja:\n",
					"Hubo un error\n", 0, 3, &ID) == 0) {
				indexToRemove = User_SearchIndexPerId(userList, userSize, ID);
				if (indexToRemove == -1) {
					printMessage("No se encontro el ID en la lista.\n", 1);
					return r;
				} else {
					printMessage(
							"El usuario que desea dar de baja es el siguiente:\n",
							1);
					User_printOne(userList[indexToRemove]);

					if (confirmation(
							"¿Esta seguro que quiere darlo de baja?(1-Si/Otro numero-No)\n",
							"Ha habido un error en relacion al numero ingresado. Intentelo nuevamente.\n")
							== 1) {
						userList[indexToRemove].isEmpty = LOW;
						//if(userList[indexToRemove].idUsuario == user.idUsuario){
						//	printf("Usuario deslogueado");
						//	user.loggedIn = 0;
						//}
						r = 0;
					} else {
						r = -2;
					}
				}
			}

		}
	}
	return r;
}

/** \brief modifies one User of the array
 * \param list User*
 * \param len int
 * \return int Return (-1) if Error [Invalid length or NULL pointer or without
 free space] - (0) if Ok*/

/*int User_Edit(User userList[], int size) {
 int r = -1;
 int indexToModify;
 int ID;
 User aux;

 if (userList != NULL) {
 if (size > 0) {
 User_printUsers(userList, size);
 if (utn_getNumero("Ingrese el ID a modificar:", "Hubo un error", 0,
 3, &ID) == 0) {
 indexToModify = User_SearchIndexPerId(userList, size, ID);
 if (indexToModify == -1) {
 printMessage("No se encontro el ID en la lista.\n", 1);
 return r;
 } else {
 printMessage("El pasajero a modificar es el siguiente:\n",
 1);
 User_printOne(userList[indexToModify]);
 aux = userList[indexToModify];
 aux = User_ModificarUno(aux);
 if (confirmation(
 "¿Esta seguro que quiere modificar los datos?(1-Si/Otro numero-No)\n",
 "Ha habido un error en relacion al numero ingresado. Intentelo nuevamente.\n")
 == 1) {
 userList[indexToModify] = aux;
 r = 0;
 }
 }
 }
 } else {
 r = -3;
 }
 } else {
 r = -2;
 }
 return r;
 }*/

/** \brief Remove a User by Id (put isEmpty Flag in 1)
 *
 * \param list User*
 * \param len int
 * \param id int
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a User] - (0) if Ok
 *
 */
/*
 int User_Baja(User userList[], int size) {
 int r = -1;
 int indexLow;
 int ID = 0;

 if (userList != NULL) {
 if (size > 0) {
 User_printUsers(userList, size);
 if (utn_getNumero("Ingrese el ID a dar de baja:\n",
 "Hubo un error\n", 0, 3, &ID) == 0) {
 indexLow = User_SearchIndexPerId(userList, size, ID);
 if (indexLow == -1) {
 printMessage("No se encontro el ID en la lista.\n", 1);
 return r;
 } else {
 printMessage("El pasajero a dar de baja es el siguiente:\n",
 1);
 User_printOne(userList[indexLow]);
 if (confirmation(
 "¿Esta seguro que quiere darlo de baja?(1-Si/Otro numero-No)\n",
 "Ha habido un error en relacion al numero ingresado. Intentelo nuevamente.\n")
 == 1) {
 userList[indexLow].isEmpty = LOW;
 r = 0;
 }

 }
 }

 } else {
 r = -3;
 }
 } else {
 r = -2;
 }
 return r;
 }
 */

/** \brief gives options to modify to the user.
 *
 * \param list User*
 * \param len int
 * \param id int
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a User] - (0) if Ok
 *
 */
/*User User_ModificarUno(User s) {
 int opcion;
 do {
 if (utn_getNumero(
 "¿Que campo desea modificar? 1-Nombre\n2-Apellido\n3-Codigo de vuelo\n4-Tipo de pasajero\n5-Precio\n6-Salir\n",
 "Ha habido un error. Intentelo nuevamente.\n", 0, 3, &opcion)
 == 0) {
 switch (opcion) {
 case 1:
 getString(s.name, MAX_SIZE_CHAR, "Nombre:\n",
 "Ha habido un error\n", 3);
 break;
 case 2:
 getString(s.lastname, MAX_SIZE_CHAR, "Apellido:\n",
 "Ha habido un error\n", 3);
 break;
 case 3:
 getString(s.flycode, 10, "Codigo de vuelo:\n",
 "Ha habido un error.\n", 3);

 break;
 case 4:
 utn_getNumero("Tipo de pasajero: 1)Economico / 2)Clase alta\n",
 "Ha habido un error. Intentelo nuevamente.\n", 0, 3,
 &s.typeUser);
 break;
 case 5:
 utn_getNumeroFlotante("Precio:\n",
 "Ha habido un error. Intentelo nuevamente.\n", 0, 3,
 &s.price);
 break;
 case 6:
 printMessage("Saliendo...", 2);
 break;
 default:
 printMessage("Por favor, ingrese un numero entre 1 y 6.\n", 1);
 }
 }
 } while (opcion != 6);

 return s;
 }*/

/** \brief Search an especific space in the array
 *
 * \param list User*
 * \param len int
 * \param id status (to search)
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a User] - (0) if Ok
 *
 */

int User_SearchSpace(User userList[], int size, int status) {
	int r = -1;
	int i;

	if (userList != NULL && size > 0) {
		for (i = 0; i <= size; i++) {
			if (userList[i].isEmpty == status) {
				r = i;
				break;
			}
		}
	}
	return r;
}

/** \brief Loads non-generic data to an User auxiliar and returns it
 *
 * \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
 find a User] - (0) if Ok
 *
 */

User User_LoadUser() {
	User auxiliar;

	getString(auxiliar.email, 25, "Correo electronico:\n",
			"Error, vuelva a intentar.\n", 3);
	getString(auxiliar.password, 10, "Contraseña:\n",
			"Error, vuelva a intentar.\n", 3);
	getString(auxiliar.address, 50, "Direccion:\n",
			"Error, vuelva a intentar.\n", 3);
	utn_getNumero("Codigo postal:\n", "Error, vuelva a intentar.\n", 1, 3,
			&auxiliar.postalCode);
	utn_getNumero("Tipo de usuario:\n", "Error, vuelva a intentar.\n", 0, 3,
			&auxiliar.type);
	return auxiliar;

}

/** \brief find a User by Id en returns the index position in UsersList.
 *
 * \param list User*
 * \param len int
 * \param id int
 * \return Return User index position or (-1) if [Invalid length or
 NULL pointer received or User not found]
 *
 */
int User_SearchIndexPerId(User userList[], int size, int ID) {
	int r = -1;
	int i;

	if (userList != NULL && size > 0) {
		for (i = 0; i < size; i++) {
			if (userList[i].idUsuario == ID && userList[i].isEmpty == OCCUPIED) {
				r = i;
				break;
			}
		}
	}

	return r;
}

